

void doWork(const string& in)
{
	Mat img = imread(in);
	Mat imgShow = img.clone();
	string str;
	while (true)
	{
		int n;
		Mat kernel = (Mat_<double>(3, 3) << 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1);
		Mat laplKernel = (Mat_<double>(3, 3) << -1 , 0 , -1 , 0 , -5 , 0 , -1 , 0 , -1);
		cin >> str;
		try
		{
			n = std::stoi(str);
		}
		catch (Exception e)
		{
			cout << "End of work";
			break;
		}
		switch (n)
		{
		case 0:
			imgShow = img.clone();
			break;
		case 1:
			{
				//				   Mat kernel = (Mat_<double>(3, 3) << 1, 0, 0, 0, 1, 0, 0, 0, 1);
				filter2D(imgShow.clone(), imgShow, -1, kernel);
				break;
			}
		case 2:
			cv::blur(imgShow.clone(), imgShow, Size(3, 3));
			break;
		case 3:
			medianBlur(imgShow.clone(), imgShow, 3);
			break;
		case 4:
			cv::GaussianBlur(imgShow.clone(), imgShow, Size(3, 3), 0.0);
			break;
		case 5:
			{
				Mat element = getStructuringElement(cv::MORPH_CROSS,
				                                    cv::Size(3, 3),
				                                    cv::Point(1, 1));
				cv::erode(imgShow.clone(), imgShow, element);
				break;
			}
		case 6:
			{
				Mat gray;
				cv::cvtColor(imgShow.clone(), gray, CV_RGB2GRAY);
				Mat element = getStructuringElement(cv::MORPH_RECT,
				                                    cv::Size(3, 3),
				                                    cv::Point(1, 1));
				cv::dilate(imgShow.clone(), imgShow, element, cv::Point(-1, -1), 3);
				break;
			}
		case 7:
			{
				Mat gray;
				cv::cvtColor(imgShow.clone(), gray, CV_RGB2GRAY);
				cv::Sobel(gray.clone(), imgShow, CV_64F, 1, 0, 5);
				break;
			}
		case 8:
			{
				Mat gray;
				cv::cvtColor(imgShow.clone(), gray, CV_RGB2GRAY);
				Mat scale;
			cv: Laplacian(gray.clone(), scale, CV_16S);
				convertScaleAbs(scale.clone(), imgShow);
				//				   cv::drawContours(imgShow, scale, -1, { 0, 0, 255 }, 3);

				break;
			}
			break;
		case 9:
			{
				Mat gray;
				cv::cvtColor(imgShow.clone(), gray, CV_RGB2GRAY);
				Mat mask;
				Canny(gray, mask, 40, 120);
				imgShow.clone().copyTo(imgShow, mask);
				break;
			}
		case 10:
			{
				   vector<Mat> bgr_planes;
				   split(imgShow.clone(), bgr_planes);

				   /// Establish the number of bins
				   int histSize = 256;

				   /// Set the ranges ( for B,G,R) )
				   float range[] = { 0, 256 };
				   const float* histRange = { range };

				   bool uniform = true; bool accumulate = false;

				   Mat b_hist, g_hist, r_hist;

				   /// Compute the histograms:
				   calcHist(&bgr_planes[0], 1, 0, Mat(), b_hist, 1, &histSize, &histRange, uniform, accumulate);
				   calcHist(&bgr_planes[1], 1, 0, Mat(), g_hist, 1, &histSize, &histRange, uniform, accumulate);
				   calcHist(&bgr_planes[2], 1, 0, Mat(), r_hist, 1, &histSize, &histRange, uniform, accumulate);

				   // Draw the histograms for B, G and R
				   int hist_w = 512; int hist_h = 400;
				   int bin_w = cvRound((double)hist_w / histSize);

				   Mat histImage(hist_h, hist_w, CV_8UC3, Scalar(0, 0, 0));

				   /// Normalize the result to [ 0, histImage.rows ]
				   normalize(b_hist, b_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());
				   normalize(g_hist, g_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());
				   normalize(r_hist, r_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());

				   /// Draw for each channel
				   for (int i = 1; i < histSize; i++)
				   {
					   line(histImage, Point(bin_w*(i - 1), hist_h - cvRound(b_hist.at<float>(i - 1))),
						   Point(bin_w*(i), hist_h - cvRound(b_hist.at<float>(i))),
						   Scalar(255, 0, 0), 2, 8, 0);
					   line(histImage, Point(bin_w*(i - 1), hist_h - cvRound(g_hist.at<float>(i - 1))),
						   Point(bin_w*(i), hist_h - cvRound(g_hist.at<float>(i))),
						   Scalar(0, 255, 0), 2, 8, 0);
					   line(histImage, Point(bin_w*(i - 1), hist_h - cvRound(r_hist.at<float>(i - 1))),
						   Point(bin_w*(i), hist_h - cvRound(r_hist.at<float>(i))),
						   Scalar(0, 0, 255), 2, 8, 0);
				   }
				   imgShow = b_hist;
				break;
			}
		case 11:
			{
				   Mat gray;
				   cv::cvtColor(imgShow.clone(), gray, CV_RGB2GRAY);
				   cv::equalizeHist(gray, imgShow);
				break;
			}
		}
		cv::imshow("f", imgShow);
		cv::waitKey(0);
	}
}
